import re
import json

from general import discbot
from general import activity
from general import moderation
from general import discmess

from datetime import datetime, timezone, timedelta

FILE_AUTOGREETING = '../configs/autogreeting.json'

class Autogreeting:
    def __init__(self, bot: discbot.DiscussionsBot, activity: activity.DiscussionsActivity, moderation: moderation.DiscussionsModeration):
        self.bot = bot
        self.activity = activity
        self.moderation = moderation
    
    def handle(self, message: discmess.DiscussionsMessage, data_famous_users: list) -> list:
        if message['user_id'] in data_famous_users:
            return data_famous_users
        
        if message['type'] in ['EDIT', 'NEW', 'LOG', 'CATEGORIZE']:
            data_user_messages = self.activity.get_user_contributions(user_id=message['user_id'], limit=1)
        else:
            data_user_messages = self.activity.get_user_profile_activity(user_id=message['user_id'], limit=1)
        
        if (datetime.now(timezone.utc) - data_user_messages[0]['timestamp']) <= timedelta(hours=24):
            data_famous_users['famousUsers'].append(message['user_id']) # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
            return data_famous_users
        
        with open(FILE_AUTOGREETING, 'r') as file:
            autogreeting = json.loads(file)
            autogreeting["jsonModel"] = json.loads(autogreeting["jsonModel"])
        
        replacements = {
            '$USERNAME': {"text": message['user']},
            '$WIKINAME': {"text": self.bot._wikiname},
            '$PAGETITLE': {"text": message['thread'], "link": self.activity.get_page_url(message)}
        }

        # –∑–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ $USERNAME, $WIKI –∏ $PAGETITLE –≤ jsonModel –∏ rawContent, —Å–æ—Ö—Ä–∞–Ω—è—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª—è—è —Å—Å—ã–ª–∫–∏
        autogreeting = self._process_autogreeting(autogreeting, replacements)

        create_autogreeting = discmess.DiscussionsMessage.from_existing(autogreeting["rawContent"], autogreeting["jsonModel"], autogreeting["attachments"])
        self.moderation.create_thread_message_wall(create_autogreeting, autogreeting["title"], user_id=message['user_id'])
        return data_famous_users

    def _process_autogreeting(self, autogreeting: dict, replacements: dict) -> dict:
        autogreeting["jsonModel"] = self._replace_in_node(autogreeting["jsonModel"], replacements)[0]

        for var, rep in replacements.items():
            autogreeting["rawContent"] = autogreeting["rawContent"].replace(var, rep["text"])
        return autogreeting
    
    @staticmethod
    def _replace_in_node(node: dict, replacements: dict) -> list:
        # —Å—é–¥–∞ –ª—É—á—à–µ –Ω–µ —Å–º–æ—Ç—Ä–µ—Ç—å, —ç—Ç–æ —Å–º–µ—Ä—Ç—å –º–∏–≥–æ–º
        if node["type"] == "text":
            text = node["text"]

            for var, rep in replacements.items():
                if var in text:
                    before, _, after = text.partition(var)
                    nodes = []

                    if before:
                        nodes.append({"type": "text", "text": before, "marks": node.get("marks", [])})
                    new_node = {"type": "text", "text": rep["text"]}

                    if rep.get("link"):
                        new_node["marks"] = node.get("marks", []) + [{"type": "link", "attrs": {"href": rep["link"]}}]
                    else:
                        new_node["marks"] = node.get("marks", [])

                    nodes.append(new_node)
                    if after:
                        nodes += AutogreetingHandler.replace_in_node({"type": "text", "text": after, "marks": node.get("marks", [])}, replacements)

                    return nodes
            return [node]

        if "content" in node:
            node["content"] = [
                subnode
                for item in node["content"]
                for subnode in AutogreetingHandler.replace_in_node(item, replacements)
            ]

            return [node]
        return [node]

class AutogreetingHandler:
    def __init__(self, bot: discbot.DiscussionsBot, activity: activity.DiscussionsActivity, moderation: moderation.DiscussionsModeration):
        self.bot = bot
        self.activity = activity
        self.moderation = moderation

        self.commands_map = {
            'on': self._handle_autogreeting_enable,
            'enable': self._handle_autogreeting_enable,
            'off': self._handle_autogreeting_disable,
            'disable': self._handle_autogreeting_disable,
            'title': self._handle_autogreeting_title,
            'message': self._handle_autogreeting_message
        }
    
    def _handle_autogreeting(self, message: discmess.DiscussionsMessage, data_reply: dict) -> discmess.DiscussionsMessage:
        lower_command = message['full_command'].lower()
        for command, handler in self.commands_map.items():
            if command in lower_command:
                return handler(message, data_reply)
    
    def _handle_autogreeting_enable(self, message: discmess.DiscussionsMessage, data_reply: dict) -> discmess.DiscussionsMessage:
        with open(FILE_AUTOGREETING, 'r') as file:
            autogreeting = json.loads(file)
        
        with open(FILE_AUTOGREETING, 'w') as file:
            autogreeting['status'] = True
            file.write(json.dumps(autogreeting))
        
        reply = discmess.DiscussionsMessage()
    
        reply.add_text_to_last(message['user'], strong=True).add_text_to_last(', –∞–≤—Ç–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω—ã ‚úÖ')
        reply.add_paragraph('–¢–µ–ø–µ—Ä—å –∫–∞–∂–¥–æ–º—É –Ω–æ–≤–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–µ–µ, –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:')
        # reply.addBulletList('autogreeting title: [–Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫]', strong=True).addText(' ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫')
        # reply.addListItem('autogreeting message: [–Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]', strong=True).addText(' ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è')

        reply.add_paragraph('üìå –í —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:')
        # reply.addBulletList('$USERNAME', strong=True).addText(' ‚Äî –∏–º—è –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞')
        # reply.addListItem('$WIKINAME', strong=True).addText(' ‚Äî –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –≤–∏–∫–∏')
        # reply.addListItem('$PAGENAME', strong=True).addText(' ‚Äî –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–ª–∏ —Ç–µ–º—ã, –≥–¥–µ —É—á–∞—Å—Ç–Ω–∏–∫ –≤–ø–µ—Ä–≤—ã–µ –ø—Ä–æ—è–≤–∏–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å')

        reply.add_paragraph('üîß –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è:')
        reply.add_paragraph('–ó–∞–≥–æ–ª–æ–≤–æ–∫:', strong=True).add_text_to_last(autogreeting['title'])
        reply.add_paragraph('–°–æ–æ–±—â–µ–Ω–∏–µ:', strong=True).add_text_to_last(autogreeting['jsonModel'])

        reply.add_paragraph('üìö –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: ').add_text_to_last('–∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞', link='https://discbot.fandom.com/ru/wiki/–ö–æ–º–∞–Ω–¥—ã_–±–æ—Ç–∞')
        reply.add_text_to_last('. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤ –Ω–∞—á–∞–ª–µ —É–ø–æ–º—è–Ω—É—Ç—å –º–æ–µ –∏–º—è {} —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é!'.format(self.bot._botname))
        return reply

    def _handle_autogreeting_disable(self, message: discmess.DiscussionsMessage, data_reply: dict) -> discmess.DiscussionsMessage:
        with open(FILE_AUTOGREETING, 'r') as file:
            autogreeting = json.loads()
        
        with open(FILE_AUTOGREETING, 'w') as file:
            autogreeting['status'] = False
            file.write(json.dumps(autogreeting))
        
        reply = discmess.DiscussionsMessage()
        reply.add_text_to_last(message['user'], strong=True).add_text_to_last(', –∞–≤—Ç–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤—ã–∫–ª—é—á–µ–Ω–æ. –Ø –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ –∏—Ö –ø–µ—Ä–≤–æ–º –¥–µ–π—Å—Ç–≤–∏–∏. –ï—Å–ª–∏ –≤—ã –∑–∞—Ö–æ—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞ –≤–∫–ª—é—á–∏—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: ')
        reply.add_text_to_last('autogreeting enable', strong=True).add_text_to_last('.')

        reply.add_paragraph('üìö –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: ').add_text_to_last('–∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞', link='https://discbot.fandom.com/ru/wiki/–ö–æ–º–∞–Ω–¥—ã_–±–æ—Ç–∞')
        reply.add_text_to_last('. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤ –Ω–∞—á–∞–ª–µ —É–ø–æ–º—è–Ω—É—Ç—å –º–æ–µ –∏–º—è {} —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é!'.format(self.bot._botname))
        return reply

    def _handle_autogreeting_title(self, message: discmess.DiscussionsMessage, data_reply: dict) -> discmess.DiscussionsMessage:
        pattern = r'autogreeting title\s?:?\s?(.+)'
        match = re.match(pattern, message['full_command'])

        if not match:
            return # –Ω–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
        
        title = match.group(1)

        with open(FILE_AUTOGREETING, 'r') as file:
            autogreeting = json.loads(file.read())

        with open(FILE_AUTOGREETING, 'w') as file:
            autogreeting['title'] = newTitle
            file.write(json.dumps(autogreeting))

        reply = discmess.DiscussionsMessage()
        reply.add_text_to_last(post['user'], strong=True).add_text_to_last(', –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω üéâ')
        reply.add_paragraph('–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–∞–º–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π: ')
        reply.add_text_to_last('autogreeting message: [–Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]', strong=True).add_text_to_last('.')

        reply.add_paragraph('üìå –í —Ç–µ–∫—Å—Ç–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:')
        # reply.addBulletList('$USERNAME', strong=True).add_text_to_last(' ‚Äî –∏–º—è –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞')
        # reply.addListItem('$WIKINAME', strong=True).add_text_to_last(' ‚Äî –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –≤–∏–∫–∏')
        # reply.addListItem('$PAGENAME', strong=True).add_text_to_last(' ‚Äî –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–ª–∏ —Ç–µ–º—ã, –≥–¥–µ —É—á–∞—Å—Ç–Ω–∏–∫ –≤–ø–µ—Ä–≤—ã–µ –ø—Ä–æ—è–≤–∏–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å')

        reply.add_paragraph('üîß –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è:')
        reply.add_paragraph('–ó–∞–≥–æ–ª–æ–≤–æ–∫:', strong=True).add_text_to_last(autogreeting['title'])
        reply.add_paragraph('–°–æ–æ–±—â–µ–Ω–∏–µ:', strong=True).add_text_to_last(autogreeting['jsonModel'])

        reply.add_paragraph('üìö –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: ').add_text_to_last('–∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞', link='https://discbot.fandom.com/ru/wiki/–ö–æ–º–∞–Ω–¥—ã_–±–æ—Ç–∞')
        reply.add_text_to_last('. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤ –Ω–∞—á–∞–ª–µ —É–ø–æ–º—è–Ω—É—Ç—å –º–æ–µ –∏–º—è {} —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é!'.format(self.bot._botname))
        return reply

    def _handle_autogreeting_message(self, message: discmess.DiscussionsMessage, data_reply: dict) -> discmess.DiscussionsMessage:
        pass
